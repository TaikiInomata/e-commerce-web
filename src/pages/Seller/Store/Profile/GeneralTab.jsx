import { joiResolver } from '@hookform/resolvers/joi'
import { format } from 'date-fns'
import Joi from 'joi'
import { CalendarIcon } from 'lucide-react'
import { useId } from 'react'
import { useForm } from 'react-hook-form'
import { useDispatch, useSelector } from 'react-redux'
import { toast } from 'sonner'
import { Button } from '~/components/ui/button'
import { Calendar } from '~/components/ui/calendar'
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '~/components/ui/form'
import { Input } from '~/components/ui/input'
import { Label } from '~/components/ui/label'
import { Popover, PopoverContent, PopoverTrigger } from '~/components/ui/popover'
import { RadioGroup, RadioGroupItem } from '~/components/ui/radio-group'
import { Textarea } from '~/components/ui/textarea'
import UploadAvatar from '~/components/UploadAvatar'
import UploadImage from '~/components/UploadImage'
import { cn } from '~/lib/utils'
import { selectCurrentUser, updateUserAPI } from '~/redux/user/userSlice'
import { ACCOUNT_STATUS } from '~/utils/constants'
import { FIELD_REQUIRED_MESSAGE } from '~/utils/validators'

function GeneralTab() {
  const id = useId()
  const dispatch = useDispatch()
  const currentUser = useSelector(selectCurrentUser)

  const formSchema = Joi.object({
    name: Joi.string().required().messages({
      'string.empty': FIELD_REQUIRED_MESSAGE
    }),
    foundedDate: Joi.date().required().required().messages({
      'date.base': FIELD_REQUIRED_MESSAGE
    }),
    status: Joi.string().required().valid(...Object.values(ACCOUNT_STATUS)),
    description: Joi.string()
  })
  const form = useForm({
    resolver: joiResolver(formSchema),
    defaultValues: {
      name: currentUser?.name || 'LEVI Store',
      foundedDate: currentUser?.foundedDate || '',
      status: 'active',
      description: currentUser?.description || `
        ‚ú® LEVI Store - Th·ªùi Trang ƒê·∫≥ng C·∫•p, Phong C√°ch B·ªÅn V·ªØng ‚ú®
        Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi LEVI Store, n∆°i mang ƒë·∫øn nh·ªØng s·∫£n ph·∫©m th·ªùi trang ch·∫•t l∆∞·ª£ng cao, thi·∫øt k·∫ø tinh t·∫ø v√† ƒë·∫≠m ch·∫•t c√° t√≠nh. Ch√∫ng t√¥i t·ª± h√†o cung c·∫•p c√°c b·ªô s∆∞u t·∫≠p m·ªõi nh·∫•t, t·ª´ qu·∫ßn jeans, √°o thun, s∆° mi ƒë·∫øn ph·ª• ki·ªán cao c·∫•p, gi√∫p b·∫°n t·ª± tin th·ªÉ hi·ªán phong c√°ch ri√™ng.
        üíé Cam k·∫øt c·ªßa ch√∫ng t√¥i: <br />
        ‚úî S·∫£n ph·∫©m ch√≠nh h√£ng, ch·∫•t l∆∞·ª£ng cao <br />
        ‚úî Ch√≠nh s√°ch ƒë·ªïi tr·∫£ linh ho·∫°t, b·∫£o h√†nh uy t√≠n <br />
        ‚úî Giao h√†ng nhanh ch√≥ng, ti·ªán l·ª£i
      `
    }
  })

  const items = [
    { value: 'active', label: 'ƒêang ho·∫°t ƒë·ªông' },
    { value: 'inactive', label: 'Ng·ª´ng ho·∫°t ƒë·ªông' }
  ]

  const handleUpdateStoreGeneralInformation = (data) => {
    data.role = currentUser?.role
    toast.promise(
      dispatch(updateUserAPI(data)),
      {
        loading: 'ƒêang c·∫≠p nh·∫≠t...',
        success: (res) => {
          if (!res.error) return 'C·∫≠p nh·∫≠t th√†nh c√¥ng!'
          throw res
        }
      }
    )
  }

  return (
    <div className='bg-white rounded-lg p-4'>
      <Form {...form}>
        <form onSubmit={form.handleSubmit(handleUpdateStoreGeneralInformation)}>
          <div className="grid grid-cols-3 gap-4 mb-4">
            <div className='space-y-3'>
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className='text-base'>T√™n c·ª≠a h√†ng</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="Vd: C·ª≠a h√†ng ABC"
                        className={`placeholder:text-green-50 placeholder:text-sm placeholder:text-opacity-50 rounded-lg focus:outline-none focus:border-[2px] border-[1px] ${!!form.formState.errors['name'] && 'border-red-500'}`}
                        {...field}
                      />
                    </FormControl>
                    <FormDescription className=''>
                    B·∫°n c√≥ th·ªÉ thay ƒë·ªïi t√™n c·ª≠a h√†ng.
                    </FormDescription>
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="foundedDate"
                render={({ field }) => (
                  <FormItem className="flex flex-col">
                    <FormLabel className='text-base'>Ng√†y th√†nh l·∫≠p</FormLabel>
                    <Popover>
                      <PopoverTrigger asChild>
                        <FormControl>
                          <Button
                            variant={'outline'}
                            className={cn(
                              'w-[240px] pl-3 text-left font-normal',
                              !field.value && 'text-muted-foreground'
                            )}
                          >
                            {field.value ? (
                              format(field.value, 'dd/MM/yyyy')
                            ) : (
                              <span>Ch·ªçn ng√†y th√†nh l·∫≠p</span>
                            )}
                            <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                          </Button>
                        </FormControl>
                      </PopoverTrigger>
                      <PopoverContent className="w-auto p-0" align="start">
                        <Calendar
                          mode="single"
                          selected={field.value}
                          onSelect={field.onChange}
                          disabled={(date) =>
                            date > new Date() || date < new Date('1900-01-01')
                          }
                          initialFocus
                        />
                      </PopoverContent>
                    </Popover>
                    <FormDescription>
                    B·∫°n kh√¥ng th·ªÉ thay ƒë·ªïi ng√†y th√†nh l·∫≠p.
                    </FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <div className="space-y-3">
              <FormField
                control={form.control}
                name='status'
                render={({ field }) => (
                  <FormItem>
                    <FormLabel className='text-base'>Tr·∫°ng th√°i c·ª≠a h√†ng</FormLabel>
                    <FormControl>
                      <RadioGroup className="flex flex-wrap gap-2" defaultValue={field.value} onValueChange={field.onChange}>
                        {items.map((item) => (
                          <div
                            key={`${id}-${item.value}`}
                            className="border-input has-data-[state=checked]:border-ring relative flex flex-col items-start gap-4 rounded-md border p-3 shadow-xs outline-none"
                          >
                            <div className="flex items-center gap-2">
                              <RadioGroupItem
                                id={`${id}-${item.value}`}
                                value={item.value}
                                className="after:absolute after:inset-0"
                              />
                              <Label htmlFor={`${id}-${item.value}`}>{item.label}</Label>
                            </div>
                          </div>
                        ))}
                      </RadioGroup>
                    </FormControl>
                    <FormDescription className=''>
                    Tr·∫°ng th√°i ho·∫°t ƒë·ªông hi·ªán t·∫°i c·ªßa c·ª≠a h√†ng.
                    </FormDescription>
                  </FormItem>
                )}
              />

              <div className='space-y-2'>
                <FormLabel className='text-base'>·∫¢nh b√¨a</FormLabel>
                <UploadImage fieldName='coverPhoto' />

              </div>

            </div>

            <div>
              <Label className='text-base'>·∫¢nh ƒë·∫°i di·ªán</Label>
              <FormDescription>Click v√†o ƒë·ªÉ t·∫£i ·∫£nh l√™n.</FormDescription>
              <UploadAvatar className='mt-2 flex items-center justify-center flex-col' avatar={currentUser?.avatar} />
            </div>
          </div>

          <FormField
            control={form.control}
            name='description'
            render={({ field }) => (
              <FormItem className='mb-8'>
                <FormLabel className='text-base'>M√¥ t·∫£</FormLabel>
                <FormControl>
                  <Textarea className='placeholder:text-green-50 placeholder:text-sm placeholder:text-opacity-50 rounded-lg focus:outline-none focus:border-[2px] border-[1px] h-52' {...field} />
                </FormControl>
                <FormDescription className=''>
                          M√¥ t·∫£ c·ª≠a h√†ng c·ªßa b·∫°n.
                </FormDescription>
              </FormItem>
            )}
          />

          <Button type="submit" className='bg-mainColor1-800/85 rounded-lg w-full py-3 text-md'>C·∫≠p nh·∫≠t ch·ªânh s·ª≠a</Button>
        </form>
      </Form>
    </div>
  )
}

export default GeneralTab